name: üöÄ CD - Continuous Deployment

on:
  push:
    branches: [ main, QA ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip smoke tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Build y Test
  build-and-test:
    name: üèóÔ∏è Build and Test
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.build.outcome == 'success' }}
      tests_passed: ${{ steps.smoke_tests.outcome == 'success' }}
    steps:
      - name: üìÅ Checkout
        uses: actions/checkout@v4

      - name: üöÄ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üßπ Lint
        run: npm run lint

      - name: üèóÔ∏è Build
        id: build
        run: |
          npm run build
          
          # Verificar que el build se complet√≥ exitosamente
          if [ -d "dist" ]; then
            echo "‚úÖ Build successful - dist folder created"
            echo "build_size=$(du -sh dist | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Build failed - dist folder not found"
            exit 1
          fi

      - name: üì¶ Create deployment artifact
        run: |
          tar -czf deployment-package.tar.gz dist/ package.json package-lock.json
          echo "üì¶ Deployment package size: $(du -h deployment-package.tar.gz | cut -f1)"

      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package.tar.gz
          retention-days: 7

      - name: üé≠ Install Playwright browsers
        if: ${{ !inputs.skip_tests }}
        run: npx playwright install chromium --with-deps

      - name: üöÄ Start preview server
        if: ${{ !inputs.skip_tests }}
        run: |
          # Usar vite preview para servir el build de producci√≥n
          npx vite preview --port 3000 --host 0.0.0.0 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Esperar a que el servidor est√© listo
          echo "‚è≥ Waiting for preview server..."
          max_attempts=30
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if curl -s http://localhost:3000 > /dev/null 2>&1; then
              echo "‚úÖ Preview server is ready!"
              break
            fi
            attempt=$((attempt + 1))
            echo "Waiting... attempt $attempt/$max_attempts"
            sleep 2
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "‚ùå Preview server failed to start"
            exit 1
          fi

      - name: üß™ Run smoke tests
        id: smoke_tests
        if: ${{ !inputs.skip_tests }}
        env:
          CI: true
          BASE_URL: http://localhost:3000
        run: |
          echo "üß™ Running smoke tests on production build..."
          
          # Determinar el ambiente seg√∫n el target
          TARGET_ENV="${{ inputs.environment || 'production' }}"
          
          # Ejecutar smoke tests seg√∫n el ambiente, excluyendo @demo
          case "$TARGET_ENV" in
            "staging")
              echo "Running staging smoke tests..."
              npm run test:smoke:staging -- --grep-invert "@demo" --project=chromium || SMOKE_EXIT_CODE=$?
              ;;
            "production")
              echo "Running production smoke tests..."
              npm run test:smoke:prod -- --grep-invert "@demo" --project=chromium || SMOKE_EXIT_CODE=$?
              ;;
          esac
          
          if [ "${SMOKE_EXIT_CODE:-0}" -eq 0 ]; then
            echo "‚úÖ All smoke tests passed!"
            echo "smoke_status=passed" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Some smoke tests failed"
            echo "smoke_status=failed" >> $GITHUB_OUTPUT
            
            # Si es deployment manual y fallan los tests, preguntar si continuar
            if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              echo "‚ö†Ô∏è Smoke tests failed but this is a manual deployment"
              echo "‚ö†Ô∏è Check the test results before proceeding with deployment"
            else
              exit 1
            fi
          fi

      - name: üõë Stop preview server
        if: always() && env.SERVER_PID != ''
        run: |
          echo "üõë Stopping preview server..."
          kill ${{ env.SERVER_PID }} || true

      - name: üìä Upload test results
        if: ${{ !inputs.skip_tests && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # Job 2: Deploy
  deploy:
    name: üöÄ Deploy to ${{ inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    needs: build-and-test
    if: |
      needs.build-and-test.outputs.build_success == 'true' &&
      (needs.build-and-test.outputs.tests_passed == 'true' || inputs.skip_tests == true || github.event_name == 'workflow_dispatch')
    environment: ${{ inputs.environment || 'production' }}
    steps:
      - name: üìÅ Checkout
        uses: actions/checkout@v4

      - name: üì• Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: üì¶ Extract deployment package
        run: |
          tar -xzf deployment-package.tar.gz
          echo "üì¶ Deployment package extracted"
          ls -la

      - name: üöÄ Deploy to environment
        env:
          TARGET_ENV: ${{ inputs.environment || 'production' }}
        run: |
          echo "üöÄ Deploying to $TARGET_ENV environment..."
          
          # Aqu√≠ ir√≠an los comandos reales de deployment
          # Por ejemplo:
          # - Subir a S3/Azure/GCP
          # - Deploy a Vercel/Netlify
          # - SSH a servidor
          # - Docker push/deploy
          # - Kubernetes apply
          
          case "$TARGET_ENV" in
            "staging")
              echo "üì§ Deploying to staging server..."
              # Ejemplo: aws s3 sync dist/ s3://staging-bucket/
              # Ejemplo: vercel deploy --prod=false
              ;;
            "production")
              echo "üì§ Deploying to production server..."
              # Ejemplo: aws s3 sync dist/ s3://production-bucket/
              # Ejemplo: vercel deploy --prod
              ;;
          esac
          
          echo "‚úÖ Deployment completed successfully!"

      - name: üîç Verify deployment
        env:
          TARGET_ENV: ${{ inputs.environment || 'production' }}
        run: |
          echo "üîç Verifying deployment..."
          
          # URL de verificaci√≥n seg√∫n ambiente
          case "$TARGET_ENV" in
            "staging")
              VERIFY_URL="https://staging.example.com/health"
              ;;
            "production")
              VERIFY_URL="https://www.example.com/health"
              ;;
          esac
          
          # Verificar que el sitio responde
          echo "Checking $VERIFY_URL..."
          # curl -f $VERIFY_URL || echo "‚ö†Ô∏è Health check failed"
          
          echo "‚úÖ Deployment verification completed"

  # Job 3: Post-deployment
  post-deployment:
    name: üìã Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy]
    if: always()
    steps:
      - name: üìä Generate deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build-and-test.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.build-and-test.outputs.tests_passed == 'true' && '‚úÖ Passed' || inputs.skip_tests && '‚è≠Ô∏è Skipped' || '‚ö†Ô∏è Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result == 'success' && '‚úÖ Success' || needs.deploy.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

    
      - name: üè∑Ô∏è Create deployment tag
        if: needs.deploy.result == 'success' && (inputs.environment == 'production' || github.event_name == 'push')
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const env = '${{ inputs.environment || 'production' }}';
            const tagName = `deploy-${env}-${date}-${{ github.run_number }}`;
            
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: context.sha
              });
              console.log(`Created tag: ${tagName}`);
            } catch (error) {
              console.error(`Failed to create tag: ${error.message}`);
            }