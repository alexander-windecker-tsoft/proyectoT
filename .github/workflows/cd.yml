name: 🚀 CD - Continuous Deployment

on:
  push:
    branches:
      - main        # Deploy a producción
      - develop     # Deploy a staging
    tags:
      - 'v*'        # Deploy de releases
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Determinar ambiente de destino
  determine-environment:
    name: 🎯 Determine Target Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    steps:
      - name: 🎯 Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=none" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # Job 2: Pre-deployment tests
  pre-deployment-tests:
    name: 🧪 Pre-deployment Tests
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should_deploy == 'true' && github.event.inputs.skip_tests != 'true'
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧹 Lint check
        run: npm run lint

      - name: 🔨 Build check
        run: npm run build

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: 🧪 Run targeted tests
        env:
          TEST_ENV: ${{ needs.determine-environment.outputs.environment == 'production' && 'prod' || 'staging' }}
        run: |
          if [[ "${{ needs.determine-environment.outputs.environment }}" == "production" ]]; then
            npm run test:smoke
          else
            npm run test:staging
          fi

  # Job 3: Build y preparación para deploy
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [determine-environment, pre-deployment-tests]
    if: needs.determine-environment.outputs.should_deploy == 'true' && (success() || github.event.inputs.skip_tests == 'true')
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Create deployment package
        run: |
          tar -czf deployment-package.tar.gz dist/ package.json package-lock.json

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ needs.determine-environment.outputs.environment }}
          path: deployment-package.tar.gz
          retention-days: 30

  # Job 4: Deploy a Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [determine-environment, build]
    if: needs.determine-environment.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.tu-app.com
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-package-staging

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "📦 Extracting deployment package..."
          tar -xzf deployment-package.tar.gz
          
          echo "🔧 Setting up staging environment..."
          # Aquí irían los comandos específicos para tu plataforma de deploy
          # Ejemplos:
          # - AWS: aws s3 sync dist/ s3://staging-bucket
          # - Netlify: netlify deploy --prod --dir=dist
          # - Vercel: vercel --prod
          # - Docker: docker build -t app:staging . && docker push registry/app:staging
          
          echo "✅ Staging deployment completed!"

      - name: 🧪 Post-deployment verification
        run: |
          echo "🔍 Running post-deployment verification..."
          # Aquí puedes agregar health checks
          # curl -f https://staging.tu-app.com/health || exit 1

  # Job 5: Deploy a Producción
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [determine-environment, build]
    if: needs.determine-environment.outputs.environment == 'production'
    environment:
      name: production
      url: https://tu-app.com
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-package-production

      - name: 🎯 Deploy to production
        run: |
          echo "🎯 Deploying to production environment..."
          echo "📦 Extracting deployment package..."
          tar -xzf deployment-package.tar.gz
          
          echo "⚠️ Production deployment - implementing blue-green strategy..."
          # Aquí irían los comandos específicos para producción
          # Con estrategias como blue-green, canary, etc.
          
          echo "✅ Production deployment completed!"

      - name: 🧪 Post-deployment smoke tests
        run: |
          echo "💨 Running post-deployment smoke tests..."
          # Ejecutar smoke tests contra producción
          # npm run test:smoke:prod

  # Job 6: Notificaciones
  notify:
    name: 📢 Deployment Notifications
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-staging, deploy-production]
    if: always() && needs.determine-environment.outputs.should_deploy == 'true'
    steps:
      - name: 📢 Success notification
        if: success()
        run: |
          echo "✅ Deployment to ${{ needs.determine-environment.outputs.environment }} completed successfully!"
          echo "🔗 URL: ${{ needs.determine-environment.outputs.environment == 'production' && 'https://tu-app.com' || 'https://staging.tu-app.com' }}"

      - name: ❌ Failure notification
        if: failure()
        run: |
          echo "❌ Deployment to ${{ needs.determine-environment.outputs.environment }} failed!"
          echo "🔍 Check the workflow logs for details"

      - name: 📊 Add deployment summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
