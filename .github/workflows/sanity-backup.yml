name: 🧪 Sanity Test CI
run-name: ${{ github.actor }} triggered SanityTest in ${{ github.ref_name }}

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Selecciona el sistema operativo'
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
          - ubuntu-latest
          - windows-latest
          - macos-latest
      environment:
        description: 'Selecciona el ambiente de prueba'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - prod
          - uat
          - dev
          - QA
      test_run:
        description: 'Selecciona la ejecución de prueba (path del test)'
        required: true
        default: 'tests/'
        type: choice
        options:
          - tests/
          - tests/login.spec.ts
          - tests/afiliados-control.spec.ts
          - tests/demo-failures.spec.ts
          - '@demo'
          - '@sanity'
      browser:
        description: 'Selecciona el navegador'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit

env:
  NODE_VERSION: '20'

jobs:
  sanity_test:
    name: 🧪 Sanity Tests - ${{ github.event.inputs.environment }}
    runs-on: ${{ github.event.inputs.os }}
    environment: 
        name: ${{ github.event.inputs.environment }}

    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Verify test path
        run: |
          echo "🔍 Verificando path de tests: ${{ github.event.inputs.test_run }}"
          
          if [ "${{ github.event.inputs.test_run }}" = "tests/" ]; then
            echo "📁 Ejecutando todos los tests de sanity"
            find tests -name "*.spec.ts" | head -10
          elif [ "${{ github.event.inputs.test_run }}" = "@demo" ]; then
            echo "🎭 Ejecutando tests de DEMO (que fallan intencionalmente)"
            echo "📋 Estos tests mostrarán errores en el reporte para demostración"
          elif [ "${{ github.event.inputs.test_run }}" = "@sanity" ]; then
            echo "� Ejecutando todos los tests con tag @sanity"
            grep -r "@sanity" tests/ || echo "Buscando tests con tag @sanity..."
          elif [[ "${{ github.event.inputs.test_run }}" == *.spec.ts ]]; then
            echo "�📁 Ejecutando test específico: ${{ github.event.inputs.test_run }}"
            if [ ! -f "${{ github.event.inputs.test_run }}" ]; then
              echo "❌ Error: Archivo de test no encontrado!"
              exit 1
            fi
          else
            echo "❌ Error: Opción de test no reconocida!"
            exit 1
          fi

      - name: 🏗️ Build application
        run: npm run build

      - name: 🎭 Install Playwright browsers
        run: |
          npx playwright install ${{ github.event.inputs.browser }} --with-deps
          npx playwright install-deps

      - name: 🧪 Run Sanity Tests
        env:
          TEST_ENV: ${{ github.event.inputs.environment }}
          CI: true
          PORT: 3000
          HOST: 0.0.0.0
          # Forzar localhost para CI independientemente del ambiente
          PLAYWRIGHT_BASE_URL: http://localhost:3000
        run: |
          echo "🧪 SANITY TESTS EXECUTION"
          echo "🌐 Environment: ${{ github.event.inputs.environment }}"
          echo "🖥️ OS: ${{ github.event.inputs.os }}"
          echo "🧪 Browser: ${{ github.event.inputs.browser }}"
          echo "📁 Test Path: ${{ github.event.inputs.test_run }}"
          echo "============================================"
          
          # Crear directorios de reportes
          mkdir -p test-results
          mkdir -p playwright-report
          
          # Verificar que el build existe
          if [ ! -d "dist" ]; then
            echo "❌ Error: dist folder not found! Build failed."
            exit 1
          fi
          
          # Ejecutar tests de sanity específicos
          if [ "${{ github.event.inputs.test_run }}" = "tests/" ]; then
            echo "🔄 Running ALL sanity tests..."
            npm run test:sanity:${{ github.event.inputs.environment }} -- --project=${{ github.event.inputs.browser }} || EXIT_CODE=$?
          elif [ "${{ github.event.inputs.test_run }}" = "@demo" ]; then
            echo "� Running DEMO tests (tests that fail intentionally)..."
            echo "📋 These tests will fail to show error reporting in action"
            TEST_ENV=${{ github.event.inputs.environment }} npx playwright test --grep "@demo" --project=${{ github.event.inputs.browser }} || EXIT_CODE=$?
          elif [ "${{ github.event.inputs.test_run }}" = "@sanity" ]; then
            echo "🔄 Running all @sanity tagged tests..."
            TEST_ENV=${{ github.event.inputs.environment }} npx playwright test --grep "@sanity" --project=${{ github.event.inputs.browser }} || EXIT_CODE=$?
          elif [[ "${{ github.event.inputs.test_run }}" == *.spec.ts ]]; then
            echo "�🎯 Running specific test file with @sanity filter..."
            echo "📋 Filtering for @sanity tests only in: ${{ github.event.inputs.test_run }}"
            TEST_ENV=${{ github.event.inputs.environment }} npx playwright test "${{ github.event.inputs.test_run }}" --grep "@sanity" --project=${{ github.event.inputs.browser }} || EXIT_CODE=$?
          else
            echo "🎯 Running specific test file: ${{ github.event.inputs.test_run }}"
            TEST_ENV=${{ github.event.inputs.environment }} npx playwright test "${{ github.event.inputs.test_run }}" --project=${{ github.event.inputs.browser }} || EXIT_CODE=$?
          fi
          
          echo "📋 Tests execution completed with exit code: ${EXIT_CODE:-0}"

      - name: 📸 Capture failure screenshots
        if: failure()
        run: |
          echo "📸 Capturing failure evidence..."
          find test-results -name "*.png" -o -name "*.webm" | head -10
          
          # Listar archivos de trace si existen
          find test-results -name "trace.zip" | head -5

      - name: 📊 Upload sanity test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sanity-results-${{ github.event.inputs.environment }}-${{ github.event.inputs.os }}-${{ github.event.inputs.browser }}-${{ github.run_attempt }}
          path: |
            playwright-report/
            test-results/
          retention-days: 14
          if-no-files-found: warn

      - name: 📋 Generate sanity test summary
        if: always()
        run: |
          echo "# 🧪 SANITY TEST RESULTS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**OS:** ${{ github.event.inputs.os }}" >> $GITHUB_STEP_SUMMARY
          echo "**Browser:** ${{ github.event.inputs.browser }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Path:** ${{ github.event.inputs.test_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Verificar resultados
          if [ -f "test-results/results.json" ]; then
            # Instalar jq si no está disponible
            which jq || sudo apt-get install -y jq
            
            passed=$(cat test-results/results.json | jq '.stats.passed' 2>/dev/null || echo "0")
            failed=$(cat test-results/results.json | jq '.stats.failed' 2>/dev/null || echo "0")
            skipped=$(cat test-results/results.json | jq '.stats.skipped' 2>/dev/null || echo "0")
            
            echo "## 📊 Test Statistics" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Status | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| ✅ Passed | $passed |" >> $GITHUB_STEP_SUMMARY
            echo "| ❌ Failed | $failed |" >> $GITHUB_STEP_SUMMARY
            echo "| ⏭️ Skipped | $skipped |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$failed" -gt 0 ]; then
              echo "## ❌ SANITY CHECK FAILED" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "- ⚠️ $failed test(s) failed" >> $GITHUB_STEP_SUMMARY
              echo "- 🔍 Check test reports for details" >> $GITHUB_STEP_SUMMARY
              echo "- 📁 Artifacts available for download" >> $GITHUB_STEP_SUMMARY
            else
              echo "## ✅ SANITY CHECK PASSED" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "- 🎯 All critical functionality working" >> $GITHUB_STEP_SUMMARY
              echo "- 🚀 Environment ready for use" >> $GITHUB_STEP_SUMMARY
              echo "- 💪 Sanity validation successful" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ⚠️ NO TEST RESULTS FOUND" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Could not find test results file. Check workflow logs." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Detailed HTML reports available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY