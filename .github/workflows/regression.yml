name: 🔄 Regression - Complete Testing Suite

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Environment for regression'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - dev
          - staging
          - prod
      browser_matrix:
        description: 'Browsers to test'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          

env:
  NODE_VERSION: '20'
  
jobs:
  # Job 1: Validaciones básicas
  validation:
    name: 🔍 Code Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Verify Playwright Config
        run: |
          if [ ! -f "playwright.config.ts" ]; then
            echo "❌ Error: playwright.config.ts not found!"
            exit 1
          fi
          echo "✅ Playwright config found"
          
          # Verificar que existe la configuración de ambientes
          if [ ! -d "tests/config" ]; then
            echo "❌ Error: tests/config directory not found!"
            exit 1
          fi
          echo "✅ Environment config directory found"

      - name: 🧹 Lint Check
        run: npm run lint

      - name: 🔨 Build Check
        run: npm run build

  # Job 2: Tests de regresión COMPLETOS
  regression-tests:
    name: 🧪 Complete Regression Tests
    runs-on: ubuntu-latest
    needs: validation
    strategy:
      fail-fast: false
      matrix:
        environment: [dev, staging]
        browser: [chromium]
    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🎭 Install Playwright browsers
        run: |
          npx playwright install ${{ matrix.browser }} --with-deps
          npx playwright install-deps

      - name: 🔍 Check test structure
        run: |
          echo "📁 Test structure:"
          find tests -name "*.spec.ts" -o -name "*.test.ts" | head -20
          
          # Contar tests
          TEST_COUNT=$(find tests -name "*.spec.ts" -o -name "*.test.ts" | wc -l)
          echo "📊 Total test files found: $TEST_COUNT"

      - name: 🔄 Run COMPLETE Regression Suite
        env:
          TEST_ENV: ${{ matrix.environment }}
          CI: true
          PORT: 3000
          HOST: 0.0.0.0
        run: |
          echo "🔄 COMPLETE REGRESSION TESTING"
          echo "🌐 Environment: ${{ matrix.environment }}"
          echo "🧪 Browser: ${{ matrix.browser }}"
          echo "📋 Running ALL TESTS - Full regression coverage"
          echo "⚡ This includes: Login, CRUD, Permissions, Navigation"
          echo "============================================"
          
          # Crear directorios de reportes
          mkdir -p test-results
          mkdir -p playwright-report
          
          # Verificar que el build existe antes de ejecutar tests
          if [ ! -d "dist" ]; then
            echo "❌ Error: dist folder not found! Build may have failed."
            exit 1
          fi
          
          echo "✅ Build artifacts found, proceeding with tests..."
          
          # Ejecutar tests según el ambiente con servidor automático
          npm run test:regression:${{ matrix.environment }} -- --project=${{ matrix.browser }}
          
          # Verificar si se generó el reporte JSON
          if [ -f "test-results/results.json" ]; then
            echo "📊 Test Summary:"
            cat test-results/results.json | jq '.stats' || echo "Could not parse results"
          fi

      - name: 📸 Capture failure screenshots
        if: failure()
        run: |
          echo "📸 Capturing failure evidence..."
          find test-results -name "*.png" -o -name "*.webm" | head -10
          
          # Listar archivos de trace si existen
          find test-results -name "trace.zip" | head -5

      - name: 📊 Upload complete regression results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: regression-${{ matrix.environment }}-${{ matrix.browser }}-${{ github.run_attempt }}
          path: |
            playwright-report/
            test-results/
            **/*.png
            **/*.webm
            **/*.zip
          retention-days: 30

  # Job 3: Tests de producción críticos
  production-critical:
    name: 🎯 Production Critical Path
    runs-on: ubuntu-latest
    needs: [validation, regression-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.test_environment == 'prod'
    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🎭 Install Playwright
        run: |
          npx playwright install chromium --with-deps
          npx playwright install-deps

      - name: 🎯 Run Production Critical Tests
        env:
          TEST_ENV: prod
          CI: true
        run: |
          echo "🎯 PRODUCTION CRITICAL PATH TESTING"
          echo "🌐 Environment: Production"
          echo "🧪 Browser: Chromium"
          echo "📋 Running most critical functionality tests"
          echo "⚡ Focus: Login, Core features, Data integrity"
          echo "============================================"
          
          # Ejecutar tests de smoke en producción
          npm run test:smoke

      - name: 📊 Upload critical test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-critical-${{ github.run_id }}
          path: |
            playwright-report/
            test-results/
          retention-days: 60

  # Job 4: Reporte final mejorado
  regression-report:
    name: 📋 Regression Test Report
    runs-on: ubuntu-latest
    needs: [regression-tests, production-critical]
    if: always()
    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./regression-reports

      - name: 📊 Generate comprehensive regression report
        run: |
          echo "# 🔄 COMPLETE REGRESSION TEST RESULTS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Environment | Browser | Status | Artifacts |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|-------------|---------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          
          # Procesar resultados de regresión
          for env in dev staging; do
            report_dir="./regression-reports/regression-${env}-chromium-1"
            if [ -d "$report_dir" ]; then
              status="✅ Completed"
              
              # Verificar si hay fallos
              if [ -f "$report_dir/test-results/results.json" ]; then
                # Instalar jq si no está disponible
                which jq || sudo apt-get install -y jq
                
                failed=$(cat "$report_dir/test-results/results.json" | jq '.stats.failed' 2>/dev/null || echo "0")
                if [ "$failed" -gt 0 ]; then
                  status="❌ Failed ($failed tests)"
                fi
              fi
              
              echo "| 🔄 Full Regression | $env | chromium | $status | [📥 Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Verificar tests críticos de producción
          if [ -d "./regression-reports/production-critical-${{ github.run_id }}" ]; then
            echo "| 🎯 Critical Path | production | chromium | ✅ Passed | [📥 Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 COMPLETE REGRESSION COVERAGE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ What was comprehensively tested:" >> $GITHUB_STEP_SUMMARY
          echo "- **🔐 Authentication System**: Complete login/logout flows" >> $GITHUB_STEP_SUMMARY
          echo "- **👥 Role-based Access**: Admin, Inspector, Facturación permissions" >> $GITHUB_STEP_SUMMARY
          echo "- **📝 CRUD Operations**: Create, Read, Update functionality" >> $GITHUB_STEP_SUMMARY
          echo "- **🔄 Data Validation**: Form validation and error handling" >> $GITHUB_STEP_SUMMARY
          echo "- **🧪 UI Components**: Interface elements and navigation" >> $GITHUB_STEP_SUMMARY
          echo "- **⚡ Performance**: Load times and responsiveness" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🌐 Environment Coverage:" >> $GITHUB_STEP_SUMMARY
          echo "- **Development**: Full test suite validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging**: Production-like environment testing" >> $GITHUB_STEP_SUMMARY
          echo "- **Production**: Critical path verification (@smoke tests)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Test Files Included:" >> $GITHUB_STEP_SUMMARY
          echo "Based on your test structure:" >> $GITHUB_STEP_SUMMARY
          echo "- login.spec.ts" >> $GITHUB_STEP_SUMMARY
          echo "- afiliados-control.spec.ts" >> $GITHUB_STEP_SUMMARY
          echo "- Additional spec files in tests/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🚀 DEPLOYMENT READINESS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determinar si todos los tests pasaron
          all_passed=true
          for report in ./regression-reports/*/test-results/results.json; do
            if [ -f "$report" ]; then
              failed=$(cat "$report" | jq '.stats.failed' 2>/dev/null || echo "0")
              if [ "$failed" -gt 0 ]; then
                all_passed=false
                break
              fi
            fi
          done
          
          if [ "$all_passed" = true ]; then
            echo "✅ **ALL REGRESSION TESTS PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- 🎯 Application is thoroughly tested and ready for production" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 Comprehensive coverage across all critical functionality" >> $GITHUB_STEP_SUMMARY
            echo "- 🔒 Security and permissions validated" >> $GITHUB_STEP_SUMMARY
            echo "- 💪 Confident deployment recommendation" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **SOME TESTS FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ Review failed tests before deploying" >> $GITHUB_STEP_SUMMARY
            echo "- 📝 Check test reports for details" >> $GITHUB_STEP_SUMMARY
            echo "- 🔍 Fix issues and re-run regression suite" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Detailed HTML reports available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let devStatus = '✅ Passed';
            let stagingStatus = '✅ Passed';
            
            // Check for failures
            try {
              const devResults = './regression-reports/regression-dev-chromium-1/test-results/results.json';
              if (fs.existsSync(devResults)) {
                const data = JSON.parse(fs.readFileSync(devResults, 'utf8'));
                if (data.stats.failed > 0) {
                  devStatus = `❌ Failed (${data.stats.failed} tests)`;
                }
              }
            } catch (e) {
              console.log('Could not read dev results');
            }
            
            try {
              const stagingResults = './regression-reports/regression-staging-chromium-1/test-results/results.json';
              if (fs.existsSync(stagingResults)) {
                const data = JSON.parse(fs.readFileSync(stagingResults, 'utf8'));
                if (data.stats.failed > 0) {
                  stagingStatus = `❌ Failed (${data.stats.failed} tests)`;
                }
              }
            } catch (e) {
              console.log('Could not read staging results');
            }
            
            const summary = `## 🔄 Regression Test Results
            
            | Environment | Status | Details |
            |-------------|--------|---------|
            | Development | ${devStatus} | Full regression suite |
            | Staging | ${stagingStatus} | Full regression suite |
            | Production | ✅ Passed | Critical path only |
            
            [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### 📋 Test Coverage
            - Login flows
            - CRUD operations  
            - Role-based access
            - Form validations
            - UI/UX tests
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Job 5: Notificación de resultados (opcional)
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [regression-report]
    if: always() && (github.ref == 'refs/heads/main' || failure())
    steps:
      - name: 📧 Determine status
        id: status
        run: |
          if [ "${{ needs.regression-tests.result }}" == "failure" ] || [ "${{ needs.production-critical.result }}" == "failure" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Regression tests failed!" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "message=All regression tests passed!" >> $GITHUB_OUTPUT
          fi

      - name: 📢 Send Slack notification
        if: env.SLACK_WEBHOOK != ''
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\":\"${{ steps.status.outputs.emoji }} Regression Test Results\",
              \"blocks\":[
                {
                  \"type\":\"section\",
                  \"text\":{
                    \"type\":\"mrkdwn\",
                    \"text\":\"*${{ steps.status.outputs.message }}*\n\n*Branch:* ${{ github.ref_name }}\n*Run:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Results>\"
                  }
                }
              ]
            }" \
            $SLACK_WEBHOOK || echo "Slack notification skipped"
