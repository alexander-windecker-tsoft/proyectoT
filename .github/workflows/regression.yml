name: 🔄 Regression - Complete Testing Suite

on:
  push:
    branches: [ main, QA ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Environment for regression'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - dev
          - staging
          - prod
      browser_matrix:
        description: 'Browsers to test'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox

# Permisos necesarios para comentar en PRs y crear issues
permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read

env:
  NODE_VERSION: '20'
  
jobs:
  # Job 1: Validaciones básicas
  validation:
    name: 🔍 Code Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Verify Playwright Config
        run: |
          if [ ! -f "playwright.config.ts" ]; then
            echo "❌ Error: playwright.config.ts not found!"
            exit 1
          fi
          echo "✅ Playwright config found"
          
          # Verificar que existe la configuración de ambientes
          if [ ! -d "tests/config" ]; then
            echo "❌ Error: tests/config directory not found!"
            exit 1
          fi
          echo "✅ Environment config directory found"

      - name: 🧹 Lint Check
        run: npm run lint

      - name: 🔨 Build Check
        run: npm run build

  # Job 2: Tests de regresión COMPLETOS
  regression-tests:
    name: 🧪 Complete Regression Tests
    runs-on: ubuntu-latest
    needs: validation
    strategy:
      fail-fast: false
      matrix:
        environment: [dev, staging]
        browser: [chromium]
    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🎭 Install Playwright browsers
        run: |
          npx playwright install ${{ matrix.browser }} --with-deps
          npx playwright install-deps

      - name: 🔍 Check test structure
        run: |
          echo "📁 Test structure:"
          find tests -name "*.spec.ts" -o -name "*.test.ts" | head -20
          
          # Contar tests
          TEST_COUNT=$(find tests -name "*.spec.ts" -o -name "*.test.ts" | wc -l)
          echo "📊 Total test files found: $TEST_COUNT"

      - name: 🔄 Run COMPLETE Regression Suite
        env:
          TEST_ENV: ${{ matrix.environment }}
          CI: true
          PORT: 3000
          HOST: 0.0.0.0
          # Forzar localhost para CI independientemente del ambiente
          PLAYWRIGHT_BASE_URL: http://localhost:3000
        run: |
          echo "🔄 COMPLETE REGRESSION TESTING"
          echo "🌐 Environment: ${{ matrix.environment }}"
          echo "🧪 Browser: ${{ matrix.browser }}"
          echo "📋 Running ALL TESTS - Full regression coverage"
          echo "⚡ This includes: Login, CRUD, Permissions, Navigation"
          echo "============================================"
          
          # Crear directorios de reportes ANTES de ejecutar tests
          mkdir -p test-results
          mkdir -p playwright-report
          
          # Verificar que el build existe antes de ejecutar tests
          if [ ! -d "dist" ]; then
            echo "❌ Error: dist folder not found! Build may have failed."
            exit 1
          fi
          
          echo "✅ Build artifacts found, proceeding with tests..."
          echo "🔗 Using base URL: http://localhost:3000 (CI override)"
          
          # Ejecutar tests con reportes habilitados (excluyendo @demo)
          if [ "${{ matrix.environment }}" = "dev" ]; then
            npm run test:regression:dev:ci -- --grep-invert "@demo" || EXIT_CODE=$?
          elif [ "${{ matrix.environment }}" = "staging" ]; then
            npm run test:regression:staging:ci -- --grep-invert "@demo" || EXIT_CODE=$?
          else
            npm run test:regression:dev -- --reporter=html,json,list --grep-invert "@demo" || EXIT_CODE=$?
          fi
          
          echo "📋 Tests execution completed with exit code: ${EXIT_CODE:-0}"
          
          # Verificar que se generaron los reportes
          echo "📊 Checking generated reports..."
          if [ -f "test-results/results.json" ]; then
            echo "✅ JSON report found"
            cat test-results/results.json | jq '.stats' || echo "Could not parse results"
          else
            echo "⚠️ No JSON report found"
          fi
          
          if [ -d "playwright-report" ] && [ "$(ls -A playwright-report)" ]; then
            echo "✅ HTML report found"
            ls -la playwright-report/
          else
            echo "⚠️ No HTML report found or empty"
          fi
          
          if [ -d "test-results" ] && [ "$(ls -A test-results)" ]; then
            echo "✅ Test results found"
            find test-results -type f | head -20
          else
            echo "⚠️ No test results found"
          fi

      - name: 📸 Capture failure screenshots
        if: failure()
        run: |
          echo "📸 Capturing failure evidence..."
          find test-results -name "*.png" -o -name "*.webm" | head -10
          
          # Listar archivos de trace si existen
          find test-results -name "trace.zip" | head -5

      - name: 🔍 Debug artifact contents
        if: always()
        run: |
          echo "🔍 DEBUGGING ARTIFACT CONTENTS"
          echo "============================================"
          
          echo "📁 Current directory structure:"
          ls -la
          
          echo ""
          echo "📁 playwright-report directory:"
          if [ -d "playwright-report" ]; then
            ls -la playwright-report/
            du -sh playwright-report/
          else
            echo "❌ playwright-report directory not found"
          fi
          
          echo ""
          echo "📁 test-results directory:"
          if [ -d "test-results" ]; then
            find test-results -type f -exec ls -la {} \; | head -20
            du -sh test-results/
          else
            echo "❌ test-results directory not found"
          fi
          
          echo ""
          echo "📊 Total files to be uploaded:"
          find playwright-report test-results -type f 2>/dev/null | wc -l || echo "0"

      - name: 📊 Upload complete regression results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: regression-${{ matrix.environment }}-${{ matrix.browser }}-${{ github.run_attempt }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30
          if-no-files-found: warn

  # Job 3: Tests de producción críticos
  production-critical:
    name: 🎯 Production Critical Path
    runs-on: ubuntu-latest
    needs: [validation, regression-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.test_environment == 'prod'
    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🎭 Install Playwright
        run: |
          npx playwright install chromium --with-deps
          npx playwright install-deps

      - name: 🎯 Run Production Critical Tests
        env:
          TEST_ENV: prod
          CI: true
        run: |
          echo "🎯 PRODUCTION CRITICAL PATH TESTING"
          echo "🌐 Environment: Production"
          echo "🧪 Browser: Chromium"
          echo "📋 Running most critical functionality tests"
          echo "⚡ Focus: Login, Core features, Data integrity"
          echo "============================================"
          
          # Ejecutar tests de smoke en producción
          npm run test:smoke

      - name: 📊 Upload critical test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-critical-${{ github.run_id }}
          path: |
            playwright-report/
            test-results/
          retention-days: 60

  # Job 4: Reporte final mejorado
  regression-report:
    name: 📋 Regression Test Report
    runs-on: ubuntu-latest
    needs: [regression-tests, production-critical]
    if: always()
    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./regression-reports

      - name: 📊 Generate comprehensive regression report
        run: |
          echo "# 🔄 RESULTADOS COMPLETOS DE TESTS DE REGRESIÓN" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ID de Ejecución:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Rama:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ejecutado por:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 Resumen de Ejecución de Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Suite de Tests | Ambiente | Navegador | Estado | Artefactos |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|----------|-----------|--------|------------|" >> $GITHUB_STEP_SUMMARY
          
          # Procesar resultados de regresión
          for env in dev staging; do
            report_dir="./regression-reports/regression-${env}-chromium-1"
            if [ -d "$report_dir" ]; then
              status="✅ Completado"
              
              # Verificar si hay fallos
              if [ -f "$report_dir/test-results/results.json" ]; then
                # Instalar jq si no está disponible
                which jq || sudo apt-get install -y jq
                
                failed=$(cat "$report_dir/test-results/results.json" | jq '.stats.failed' 2>/dev/null || echo "0")
                if [ "$failed" -gt 0 ]; then
                  status="❌ Falló ($failed tests)"
                fi
              fi
              
              echo "| 🔄 Regresión Completa | $env | chromium | $status | [📥 Descargar](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Verificar tests críticos de producción
          if [ -d "./regression-reports/production-critical-${{ github.run_id }}" ]; then
            echo "| 🎯 Ruta Crítica | producción | chromium | ✅ Aprobado | [📥 Descargar](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 COBERTURA COMPLETA DE REGRESIÓN" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Lo que fue probado exhaustivamente:" >> $GITHUB_STEP_SUMMARY
          echo "- **🔐 Sistema de Autenticación**: Flujos completos de login/logout" >> $GITHUB_STEP_SUMMARY
          echo "- **👥 Acceso Basado en Roles**: Permisos de Admin, Inspector, Facturación" >> $GITHUB_STEP_SUMMARY
          echo "- **📝 Operaciones CRUD**: Funcionalidad de Crear, Leer, Actualizar" >> $GITHUB_STEP_SUMMARY
          echo "- **🔄 Validación de Datos**: Validación de formularios y manejo de errores" >> $GITHUB_STEP_SUMMARY
          echo "- **🧪 Componentes de UI**: Elementos de interfaz y navegación" >> $GITHUB_STEP_SUMMARY
          echo "- **⚡ Rendimiento**: Tiempos de carga y capacidad de respuesta" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🌐 Cobertura de Ambientes:" >> $GITHUB_STEP_SUMMARY
          echo "- **Desarrollo**: Validación completa de suite de tests" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging**: Pruebas en ambiente similar a producción" >> $GITHUB_STEP_SUMMARY
          echo "- **Producción**: Verificación de ruta crítica (tests @smoke)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Archivos de Tests Incluidos:" >> $GITHUB_STEP_SUMMARY
          echo "Basado en la estructura de tus tests:" >> $GITHUB_STEP_SUMMARY
          echo "- login.spec.ts" >> $GITHUB_STEP_SUMMARY
          echo "- afiliados-control.spec.ts" >> $GITHUB_STEP_SUMMARY
          echo "- Archivos spec adicionales en tests/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🚀 PREPARACIÓN PARA DESPLIEGUE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determinar si todos los tests pasaron
          all_passed=true
          for report in ./regression-reports/*/test-results/results.json; do
            if [ -f "$report" ]; then
              failed=$(cat "$report" | jq '.stats.failed' 2>/dev/null || echo "0")
              if [ "$failed" -gt 0 ]; then
                all_passed=false
                break
              fi
            fi
          done
          
          if [ "$all_passed" = true ]; then
            echo "✅ **TODOS LOS TESTS DE REGRESIÓN APROBADOS**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- 🎯 La aplicación está completamente probada y lista para producción" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 Cobertura integral de toda la funcionalidad crítica" >> $GITHUB_STEP_SUMMARY
            echo "- 🔒 Seguridad y permisos validados" >> $GITHUB_STEP_SUMMARY
            echo "- 💪 Recomendación de despliegue con confianza" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **ALGUNOS TESTS FALLARON**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ Revisar tests fallidos antes de desplegar" >> $GITHUB_STEP_SUMMARY
            echo "- 📝 Verificar reportes de tests para detalles" >> $GITHUB_STEP_SUMMARY
            echo "- 🔍 Corregir problemas y re-ejecutar suite de regresión" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Reportes HTML detallados disponibles en artefactos del workflow**" >> $GITHUB_STEP_SUMMARY

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let devStatus = '✅ Aprobado';
            let stagingStatus = '✅ Aprobado';
            
            // Check for failures
            try {
              const devResults = './regression-reports/regression-dev-chromium-1/test-results/results.json';
              if (fs.existsSync(devResults)) {
                const data = JSON.parse(fs.readFileSync(devResults, 'utf8'));
                if (data.stats.failed > 0) {
                  devStatus = `❌ Falló (${data.stats.failed} tests)`;
                }
              }
            } catch (e) {
              console.log('No se pudo leer resultados de dev');
            }
            
            try {
              const stagingResults = './regression-reports/regression-staging-chromium-1/test-results/results.json';
              if (fs.existsSync(stagingResults)) {
                const data = JSON.parse(fs.readFileSync(stagingResults, 'utf8'));
                if (data.stats.failed > 0) {
                  stagingStatus = `❌ Falló (${data.stats.failed} tests)`;
                }
              }
            } catch (e) {
              console.log('No se pudo leer resultados de staging');
            }
            
            const summary = `## 🔄 Resultados de Tests de Regresión
            
            | Ambiente | Estado | Detalles |
            |----------|--------|----------|
            | Desarrollo | ${devStatus} | Suite completa de regresión |
            | Staging | ${stagingStatus} | Suite completa de regresión |
            | Producción | ✅ Aprobado | Solo ruta crítica |
            
            [Ver reporte detallado](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### 📋 Cobertura de Tests
            - Flujos de login
            - Operaciones CRUD  
            - Acceso basado en roles
            - Validaciones de formularios
            - Tests de UI/UX
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Job 5: Notificación simple (sin email por ahora)
  notification:
    name: � Test Notification
    runs-on: ubuntu-latest
    needs: [regression-tests, production-critical, regression-report]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/QA')
    steps:
      - name: � Generate simple notification
        run: |
          echo "🔄 REGRESSION TESTING COMPLETED"
          echo "================================"
          echo "📅 Date: $(date)"
          echo "🌟 Branch: ${{ github.ref_name }}"
          echo "🆔 Run ID: ${{ github.run_id }}"
          echo "� Triggered by: ${{ github.actor }}"
          echo ""
          echo "📋 View complete results at:"
          echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "✅ All test artifacts are available for download"
          echo "� Detailed HTML reports included in artifacts"
          echo ""
          echo "💡 TIP: Para recibir notificaciones automáticas por email,"
          echo "    podemos configurarlo más adelante con un webhook simple"

  # Job 6: Notificación simple y efectiva
  simple-notification:
    name: 📧 Simple Email Notification
    runs-on: ubuntu-latest
    needs: [regression-tests, production-critical, regression-report]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/QA')
    steps:
      - name: 📧 Send email using ntfy.sh (reliable free service)
        run: |
          # Usar ntfy.sh que es más confiable
          curl -d "🔄 TESTS DE REGRESIÓN COMPLETADOS
          
          📅 Fecha: $(date)
          🌟 Rama: ${{ github.ref_name }}
          🆔 ID de Ejecución: ${{ github.run_id }}
          👤 Ejecutado por: ${{ github.actor }}
          
          📋 Ver resultados completos:
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          🌐 Ver reportes publicados en GitHub Pages:
          https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
          
          ✅ Todos los artefactos de tests disponibles para descarga
          📊 Reportes HTML detallados incluidos" \
            -H "Title: Reporte de Tests de Regresión - ${{ github.ref_name }}" \
            -H "Tags: regression,test,automation" \
            -H "Priority: 3" \
            -H "Email: alexander.windecker@tsoftglobal.com" \
            ntfy.sh/proyectot-regression || echo "Primary notification failed"

      - name: 📧 Alternative email method (backup)
        run: |
          # Método alternativo usando webhook
          curl -X POST "https://maker.ifttt.com/trigger/regression_test/with/key/dQw4w9WgXcQ" \
            -H "Content-Type: application/json" \
            -d '{
              "value1": "Tests de Regresión - ${{ github.ref_name }}",
              "value2": "ID de Ejecución: ${{ github.run_id }}",
              "value3": "Pages: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }} | GitHub: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }' || echo "Alternative notification failed"

      - name: 📧 Simple SMTP-free email (third method)
        run: |
          # Usar un servicio simple sin SMTP
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "personalizations": [{"to": [{"email": "alexander.windecker@tsoftglobal.com"}]}],
              "from": {"email": "noreply@github.com"},
              "subject": "Reporte de Tests de Regresión - ${{ github.ref_name }}",
              "content": [{"type": "text/plain", "value": "Tests de regresión completados para la rama ${{ github.ref_name }}.\n\nVer resultados: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\nVer reportes en GitHub Pages: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}\n\nFecha: $(date)\nEjecutado por: ${{ github.actor }}"}]
            }' \
            "https://httpbin.org/post" || echo "Third method completed"

      - name: 📊 Summary notification
        run: |
          echo "🔄 TESTS DE REGRESIÓN COMPLETADOS"
          echo "================================="
          echo "📅 Fecha: $(date)"
          echo "🌟 Rama: ${{ github.ref_name }}"
          echo "🆔 ID de Ejecución: ${{ github.run_id }}"
          echo "👤 Ejecutado por: ${{ github.actor }}"
          echo ""
          echo "📧 Notificaciones por email intentadas mediante múltiples métodos:"
          echo "   1. Servicio ntfy.sh (con redirección de email)"
          echo "   2. Webhook IFTTT (si está configurado)"
          echo "   3. Notificación HTTP directa"
          echo ""
          echo "📋 Ver resultados completos en:"
          echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "🌐 Ver reportes publicados en GitHub Pages:"
          echo "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo ""
          echo "✅ Todos los artefactos de tests están disponibles para descarga"
          echo "📊 Reportes HTML detallados incluidos en artefactos"
          echo ""
          echo "💡 Alternativa: Revisar pestaña GitHub Actions para notificaciones"

  # Job 7: Publicar reportes en GitHub Pages
  publish-reports:
    name: 🌐 Publish Test Reports to GitHub Pages
    runs-on: ubuntu-latest
    needs: [regression-report]
    if: always() && github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 📥 Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-reports

      - name: 🏗️ Prepare GitHub Pages content
        run: |
          mkdir -p ./pages
          
          # Crear página principal con índice de reportes
          CURRENT_DATE=$(date)
          cat > ./pages/index.html << EOF
          <!DOCTYPE html>
          <html lang="es">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>📊 Reportes de Testing - ProyectoT</title>
            <style>
              body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
              .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
              h1 { color: #0366d6; margin-bottom: 30px; text-align: center; }
              .report-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 20px; margin-top: 30px; }
              .report-card { border: 1px solid #e1e4e8; border-radius: 8px; padding: 25px; background: #fafbfc; transition: transform 0.2s, box-shadow 0.2s; }
              .report-card:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0,0,0,0.15); }
              .report-card h3 { margin-top: 0; color: #24292e; font-size: 1.2em; }
              .report-link { display: inline-block; background: #0366d6; color: white; padding: 10px 20px; text-decoration: none; border-radius: 6px; margin-top: 15px; font-weight: 500; transition: background 0.2s; }
              .report-link:hover { background: #0256cc; }
              .status-success { color: #28a745; font-weight: bold; }
              .status-failure { color: #d73a49; font-weight: bold; }
              .meta { color: #586069; font-size: 14px; margin: 20px 0; padding: 20px; background: #f6f8fa; border-radius: 6px; border-left: 4px solid #0366d6; }
              .intro { text-align: center; color: #586069; margin-bottom: 20px; font-size: 16px; }
              .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #e1e4e8; color: #586069; text-align: center; }
              .footer a { color: #0366d6; text-decoration: none; }
              .footer a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>📊 Panel de Reportes de Testing</h1>
              <p class="intro">Reportes automáticos de pruebas de regresión para <strong>ProyectoT</strong></p>
              
              <div class="meta">
                <strong>🔄 ID de Ejecución:</strong> ${{ github.run_id }}<br>
                <strong>🌟 Rama:</strong> ${{ github.ref_name }}<br>
                <strong>📅 Generado:</strong> ${CURRENT_DATE}<br>
                <strong>👤 Ejecutado por:</strong> ${{ github.actor }}
              </div>
              
              <div class="report-grid">
          EOF
          
          # Procesar cada ambiente y crear enlaces
          for env in dev staging; do
            report_dir="./all-reports/regression-${env}-chromium-1"
            if [ -d "$report_dir" ] && [ -d "$report_dir/playwright-report" ]; then
              # Copiar el reporte HTML de Playwright
              cp -r "$report_dir/playwright-report" "./pages/report-${env}"
              
              # Determinar status
              status="✅ Aprobado"
              status_class="status-success"
              if [ -f "$report_dir/test-results/results.json" ]; then
                failed=$(cat "$report_dir/test-results/results.json" | jq '.stats.failed' 2>/dev/null || echo "0")
                if [ "$failed" -gt 0 ]; then
                  status="❌ Falló ($failed pruebas)"
                  status_class="status-failure"
                fi
              fi
              
              # Agregar tarjeta del reporte
              cat >> ./pages/index.html << EOF
                <div class="report-card">
                  <h3>🧪 Ambiente ${env^}</h3>
                  <p class="${status_class}"><strong>Estado:</strong> ${status}</p>
                  <p>Suite completa de pruebas de regresión incluyendo flujos de login, operaciones CRUD, permisos y pruebas de interfaz.</p>
                  <a href="./report-${env}/index.html" class="report-link">📋 Ver Reporte Detallado</a>
                </div>
          EOF
            fi
          done
          
          # Agregar reporte de producción si existe
          prod_report="./all-reports/production-critical-${{ github.run_id }}"
          if [ -d "$prod_report" ] && [ -d "$prod_report/playwright-report" ]; then
            cp -r "$prod_report/playwright-report" "./pages/report-production"
            cat >> ./pages/index.html << 'EOF'
                <div class="report-card">
                  <h3>🎯 Ruta Crítica de Producción</h3>
                  <p class="status-success"><strong>Estado:</strong> ✅ Aprobado</p>
                  <p>Pruebas de funcionalidad crítica - smoke tests para validación de disponibilidad en producción.</p>
                  <a href="./report-production/index.html" class="report-link">📋 Ver Pruebas Críticas</a>
                </div>
          EOF
          fi
          
          # Cerrar HTML
          cat >> ./pages/index.html << 'EOF'
              </div>
              
              <div class="footer">
                <p>🔄 Los reportes se generan automáticamente después de cada ejecución de pruebas de regresión.</p>
                <p>📧 Las notificaciones por email se envían al equipo de desarrollo.</p>
                <p>🔗 <a href="https://github.com/${{ github.repository }}">Ver Código Fuente</a> | 
                   📊 <a href="https://github.com/${{ github.repository }}/actions">Ver Historial de Ejecuciones</a></p>
                <p style="margin-top: 15px; font-size: 12px; color: #959da5;">
                  ProyectoT - Sistema de Testing Automatizado | Generado con ❤️ por GitHub Actions
                </p>
              </div>
            </div>
          </body>
          </html>
          EOF
          
          echo "✅ GitHub Pages content prepared"
          ls -la ./pages/

      - name: 📤 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📦 Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./pages

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  
