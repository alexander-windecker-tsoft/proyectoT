name: 🧪 Sanity - Quick Test Suite

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de tests'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod
      browser:
        description: 'Navegador para probar'
        required: true
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
      os:
        description: 'Sistema Operativo'
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
          - ubuntu-latest
          - windows-latest
          - macos-latest
      test_run:
        description: 'Test a ejecutar'
        required: true
        default: 'tests/'
        type: choice
        options:
          - tests/
          - tests/login.spec.ts
          - tests/afiliados-control.spec.ts
          - '@sanity'
          - '@smoke'
          - '@demo'

env:
  NODE_VERSION: '20'

jobs:
  sanity-tests:
    name: 🧪 Sanity Tests
    runs-on: ${{ github.event.inputs.os }}
    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Validate test selection
        run: |
          echo "🧪 VALIDACIÓN DE TESTS SANITY"
          echo "🌐 Ambiente: ${{ github.event.inputs.environment }}"
          echo "🖥️ SO: ${{ github.event.inputs.os }}"
          echo "🧪 Navegador: ${{ github.event.inputs.browser }}"
          echo "📁 Test: ${{ github.event.inputs.test_run }}"
          echo "============================================"
          
          if [ "${{ github.event.inputs.test_run }}" = "tests/" ]; then
            echo "🔄 Ejecutando TODOS los tests de sanity"
            echo "📋 Cobertura completa de funcionalidad crítica"
          elif [ "${{ github.event.inputs.test_run }}" = "@demo" ]; then
            echo "🎭 Ejecutando tests de DEMO (que fallan intencionalmente)"
            echo "📋 Estos tests mostrarán errores en el reporte para demostración"
          elif [ "${{ github.event.inputs.test_run }}" = "@sanity" ]; then
            echo "🔄 Ejecutando todos los tests con tag @sanity"
          elif [[ "${{ github.event.inputs.test_run }}" == *.spec.ts ]]; then
            echo "📁 Ejecutando test específico: ${{ github.event.inputs.test_run }}"
            if [ ! -f "${{ github.event.inputs.test_run }}" ]; then
              echo "❌ Error: Archivo de test no encontrado!"
              exit 1
            fi
          else
            echo "❌ Error: Opción de test no reconocida!"
            exit 1
          fi

      - name: 🏗️ Build application
        run: npm run build

      - name: 🎭 Install Playwright browsers
        run: |
          npx playwright install ${{ github.event.inputs.browser }} --with-deps
          npx playwright install-deps

      - name: 🧪 Run Tests
        env:
          TEST_ENV: ${{ github.event.inputs.environment }}
          CI: true
          PORT: 3000
          HOST: 0.0.0.0
          PLAYWRIGHT_BASE_URL: http://localhost:3000
        run: |
          echo "🧪 EJECUCIÓN DE TESTS SANITY"
          echo "🌐 Ambiente: ${{ github.event.inputs.environment }}"
          echo "🖥️ SO: ${{ github.event.inputs.os }}"
          echo "🧪 Navegador: ${{ github.event.inputs.browser }}"
          echo "📁 Test: ${{ github.event.inputs.test_run }}"
          echo "============================================"
          
          # Crear directorios de reportes
          mkdir -p test-results
          mkdir -p playwright-report
          
          # Verificar que el build existe
          if [ ! -d "dist" ]; then
            echo "❌ Error: carpeta dist no encontrada! El build falló."
            exit 1
          fi
          
          # Ejecutar tests según la selección
          if [ "${{ github.event.inputs.test_run }}" = "tests/" ]; then
            echo "🔄 Ejecutando TODOS los tests..."
            npm run test || EXIT_CODE=$?
          elif [ "${{ github.event.inputs.test_run }}" = "@demo" ]; then
            echo "🎭 Ejecutando tests de DEMO..."
            npm run test:demo || EXIT_CODE=$?
          elif [ "${{ github.event.inputs.test_run }}" = "@sanity" ]; then
            echo "🔄 Ejecutando tests @sanity..."
            npm run test:sanity || EXIT_CODE=$?
          elif [ "${{ github.event.inputs.test_run }}" = "@smoke" ]; then
            echo "💨 Ejecutando tests @smoke..."
            npm run test:smoke || EXIT_CODE=$?
          elif [[ "${{ github.event.inputs.test_run }}" == *.spec.ts ]]; then
            echo "🎯 Ejecutando archivo de test específico..."
            npx playwright test "${{ github.event.inputs.test_run }}" --project=${{ github.event.inputs.browser }} || EXIT_CODE=$?
          else
            echo "🎯 Ejecutando tests por defecto..."
            npm run test || EXIT_CODE=$?
          fi
          
          echo "📋 Ejecución de tests completada con código de salida: ${EXIT_CODE:-0}"

      - name: 📸 Capture failure screenshots
        if: failure()
        run: |
          echo "📸 Capturando evidencia de fallos..."
          find test-results -name "*.png" -o -name "*.webm" | head -10
          find test-results -name "trace.zip" | head -5

      - name: 🔍 Debug artifacts
        if: always()
        run: |
          echo "🔍 DEPURACIÓN DE ARTEFACTOS"
          echo "============================================"
          
          echo "📁 Directorio actual:"
          ls -la
          
          echo "📁 playwright-report:"
          if [ -d "playwright-report" ]; then
            ls -la playwright-report/
          else
            echo "❌ playwright-report no encontrado"
          fi
          
          echo "📁 test-results:"
          if [ -d "test-results" ]; then
            find test-results -type f | head -10
          else
            echo "❌ test-results no encontrado"
          fi

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sanity-${{ github.event.inputs.environment }}-${{ github.event.inputs.browser }}-${{ github.run_attempt }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7
          if-no-files-found: warn

  # Job para reporte de resumen
  sanity-report:
    name: 📋 Sanity Report
    runs-on: ubuntu-latest
    needs: sanity-tests
    if: always()
    steps:
      - name: 📊 Generate sanity report
        run: |
          echo "# 🧪 RESULTADOS DE TESTS SANITY" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Selección de Test:** ${{ github.event.inputs.test_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ambiente:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Navegador:** ${{ github.event.inputs.browser }}" >> $GITHUB_STEP_SUMMARY
          echo "**SO:** ${{ github.event.inputs.os }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.sanity-tests.result }}" = "success" ]; then
            echo "✅ **TESTS SANITY APROBADOS**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- 🎯 Validación rápida completada exitosamente" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 Toda la funcionalidad crítica verificada" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **TESTS SANITY FALLARON**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ Problemas encontrados en validación rápida" >> $GITHUB_STEP_SUMMARY
            echo "- 📝 Revisa los artefactos de tests para detalles" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Artefactos de tests disponibles para descarga**" >> $GITHUB_STEP_SUMMARY
