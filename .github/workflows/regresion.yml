name: 🔄 Regression Básica

run-name: ${{ github.actor }} ejecutó Tests de Regresión en ${{ github.ref_name }}

on:
  push:
    branches: 
      - main
      - QA
  pull_request:
    branches:
      - main
      - QA

# Permisos necesarios para comentar en PRs
permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read

env:
  NODE_VERSION: '20'

jobs:
  playwright-regression:
    name: 🧪 Playwright Regression Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint check
        run: npm run lint

      - name: 🏗️ Build application
        run: npm run build

      - name: 🎭 Install Playwright browsers
        run: |
          npx playwright install chromium --with-deps
          npx playwright install-deps

      - name: 🔍 Verify build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Error: carpeta dist no encontrada! El build falló."
            exit 1
          fi
          echo "✅ Artefactos de build encontrados"
          ls -la dist/

      - name: 🧪 Run Playwright regression tests
        env:
          CI: true
          PORT: 3000
          HOST: 0.0.0.0
          TEST_ENV: dev
          PLAYWRIGHT_BASE_URL: http://localhost:3000
        run: |
          echo "🧪 EJECUCIÓN DE TESTS DE REGRESIÓN"
          echo "🌐 Rama: ${{ github.ref_name }}"
          echo "👤 Ejecutado por: ${{ github.actor }}"
          echo "🧪 Navegador: Chromium"
          echo "📋 Ejecutando suite de tests de regresión (excluyendo tests @demo)"
          echo "============================================"
          
          # Crear directorios de reportes
          mkdir -p test-results
          mkdir -p playwright-report
          
          # Ejecutar tests de regresión usando npm script (excluyendo @demo que fallan intencionalmente)
          npm run test:regression:dev:ci:no-demo

      - name: 📸 Capture failure screenshots
        if: failure()
        run: |
          echo "📸 Capturando evidencia de fallos..."
          find test-results -name "*.png" -o -name "*.webm" | head -10
          
          # Listar archivos de trace si existen
          find test-results -name "trace.zip" | head -5

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: regression-results-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            playwright-report/
            test-results/
            **/*.png
            **/*.webm
            **/*.zip
          retention-days: 14

      - name: 📋 Generate test summary
        if: always()
        run: |
          echo "# 🔄 RESULTADOS DE TESTS DE REGRESIÓN" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Rama:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ejecutado por:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**ID de Ejecución:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Verificar resultados
          if [ -f "test-results/results.json" ]; then
            # Instalar jq si no está disponible
            which jq || sudo apt-get install -y jq
            
            passed=$(cat test-results/results.json | jq '.stats.passed' 2>/dev/null || echo "0")
            failed=$(cat test-results/results.json | jq '.stats.failed' 2>/dev/null || echo "0")
            skipped=$(cat test-results/results.json | jq '.stats.skipped' 2>/dev/null || echo "0")
            
            echo "## 📊 Estadísticas de Tests" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Estado | Cantidad |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| ✅ Aprobados | $passed |" >> $GITHUB_STEP_SUMMARY
            echo "| ❌ Fallidos | $failed |" >> $GITHUB_STEP_SUMMARY
            echo "| ⏭️ Omitidos | $skipped |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$failed" -gt 0 ]; then
              echo "## ❌ REGRESIÓN FALLÓ" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "- ⚠️ $failed test(s) fallaron" >> $GITHUB_STEP_SUMMARY
              echo "- 🔍 Revisa los reportes de tests para detalles" >> $GITHUB_STEP_SUMMARY
              echo "- 📁 Artefactos disponibles para descarga" >> $GITHUB_STEP_SUMMARY
              echo "- 🚫 **NO FUSIONAR** hasta que los tests pasen" >> $GITHUB_STEP_SUMMARY
            else
              echo "## ✅ REGRESIÓN APROBADA" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "- 🎯 Todos los tests pasaron exitosamente" >> $GITHUB_STEP_SUMMARY
              echo "- 🚀 Listo para despliegue" >> $GITHUB_STEP_SUMMARY
              echo "- 💪 Calidad de código validada" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ⚠️ NO SE ENCONTRARON RESULTADOS DE TESTS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No se pudo encontrar el archivo de resultados de tests. Revisa los logs del workflow." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Reportes HTML detallados disponibles en artefactos del workflow**" >> $GITHUB_STEP_SUMMARY

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let status = '✅ Todos los tests pasaron';
            let emoji = '✅';
            
            // Check for failures
            try {
              if (fs.existsSync('test-results/results.json')) {
                const data = JSON.parse(fs.readFileSync('test-results/results.json', 'utf8'));
                if (data.stats.failed > 0) {
                  status = `❌ ${data.stats.failed} test(s) fallaron`;
                  emoji = '❌';
                }
              }
            } catch (e) {
              console.log('No se pudo leer los resultados de tests');
              status = '⚠️ No se pudo determinar el estado de los tests';
              emoji = '⚠️';
            }
            
            const summary = `## ${emoji} Resultados de Tests de Regresión
            
            **Estado:** ${status}
            **Rama:** ${{ github.ref_name }}
            **Ejecutado por:** ${{ github.actor }}
            
            [📊 Ver reporte detallado](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### 🧪 Cobertura de Tests
            - ✅ Flujos de login
            - ✅ Operaciones CRUD  
            - ✅ Acceso basado en roles
            - ✅ Validaciones de formularios
            - ✅ Componentes UI/UX
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
    